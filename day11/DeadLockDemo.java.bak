/*
死锁：同布置中嵌套着同步。
*/
 
class Ticket implements Runnable//extends Thread
{
	private static int tickets = 1000;
	static Object obj = new Object();
	boolean flags = true;
	public void run()     // 在同步代码块中
	{
		if(flags)
			while(true)  // 
			{	 
				synchronized(obj)   // obj中有this锁
				{
					show();         
				}
			}
		else
		{
			while(true)
				show();    // show方法一定要备对象调用，前面省略的对象是this
		}
	}

	public static synchronized void show()      // 这里的同步函数的锁是this
	{
		synchronized(obj)    // this锁里有object锁
		{
			if(tickets>0)
			{
				try{Thread.sleep(10);} catch(Exception e){}
				System.out.println(Thread.currentThread().getName()+"----show:"+ tickets--);
			}
		}
	}
}


class DeadLockDemo
{
	public static void main(String[] args) 
	{
		Ticket t = new Ticket();       // 创建实例

		Thread t1 = new Thread(t);        // Thread 类中已经认识了一个Runnable类型的参数
		Thread t2 = new Thread(t);
 
		t1.start();
		
		try{Thread.sleep(10);}catch(Exception e){}     // 休眠10ms，使程序能够在上面t1这里调用
		t.flags = false;
		t2.start();
		//System.out.println("Hello World!");
	}
}
