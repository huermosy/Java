/*
多线程间通信-生产者消费者JDK5.0升级版
学习到了condition， await函数以及lock与unlock()函数，
*/
import java.util.concurrent.locks.*;       // 引入对应的库名

class Resource
{
	private String name;   // 商品的名称
	private boolean flag = false;  // 初始化标识符为false
	private int count = 0;   // 初始化计数为0
	private Lock lock = new ReentrantLock();

	private Condition con = lock.newCondition();

	public void sell(String name)throws InterruptedException                // 因为方法中没有catch所以要抛
	{
		lock.lock();      // 拿到锁
		try
		{
			while(this.flag)
			condition.await();
			this.name = name+"-----"+ count++;
			 
			System.out.println(Thread.currentThread().getName()+ "生产者+++++++"+ this.name );
			flag = true;       // 代表可以进入阻塞状态
			condition.signal();

		}
		finally
		{
			lock.unlock();          // 放弃锁
		}
	}

	public void out(String name)throws InterruptedException         
	{
		lock.lock();       // 拿到锁
		try
		{
			 
		while(!this.flag)
			 condition.await();
		System.out.println(Thread.currentThread().getName()+"-----------消费者"+ this.name );
		flag = false;       // 代表可以进入阻塞状态
		condition.signal();
		}
		finally
		{
			lock.unlock();     // 放弃锁
		}
	}

}

class Producer implements Runnable // 卖家类
{
	private Resource res;
	Producer(Resource res)
	{
		this.res = res;
	}
	public void run()
	{
		while(true)
		{
			try
			{
				res.sell("奶茶");
			}
			catch (InterruptedException e)
			{
			}
			 
		}
	}
}

class Customer implements Runnable   // 顾客类
{
	private Resource res;       // 创建一个Resource类的引用
	Customer(Resource res)
	{
		this.res = res;
	}
	public void run()
	{
		while(true)
		{
			try
			{
				res.out("奶茶");
			}
			catch (InterruptedException e)
			{
			}
		}
	}
}

class ProducerCustomerDemo2
{
	public static void main(String[] args) 
	{
		Resource r = new Resource();

		Customer c1 = new Customer(r);
		Producer p1 = new Producer(r);

		Thread t1 = new Thread(c1);
		Thread t2 = new Thread(c1);
		Thread t3 = new Thread(p1);
		Thread t4 = new Thread(p1);

		t1.start();
		t2.start();
		t3.start();
		t4.start();
		//System.out.println("Hello World!");
	}
}
