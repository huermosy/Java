/*
练习：      获取该字符串中各个字母出现的次数；
希望打印的结果为：   a(4) b(2) c(5)....    以此类推

通过结果可以发现每个字母都有一个对应的次数，
说明字母与次数之间存在着一一对应的映射关系。

因此我们可以使用map集合。
为什么使用map集合？
当数据之间存在着映射关系时，就可以使用map集合。

思路：
1.将字符串转换为字符数组，因为要对每一个字母进行操作。   toCharArray()  将此字符串转换为一个新的字符数组。 

2.定义一个map集合，因为打印结果的字母有序，所以使用treemap集合

3.遍历数组。   相当于py中的那个思路
	用get方法括号中加键得到对应的值，并且如果值为空的话可以进行操作。
4.将map数据变成指定的字符串打印，这里就先打印一个map集合即可。

键是对应的字母，值时出现的次数

 


*/
import java.util.*;

class  MapTest3p
{
	public static void main(String[] args) 
	{
		System.out.println(toArray("dfefagduoahuermosy"));
//		toArray("dfefagduoahuermosy");
	}

	public static String toArray(String str)
	{
		char[] chs = str.toCharArray();          // 将一个字符串转换为数组to
		TreeMap<Character, Integer> t1 = new TreeMap<Character, Integer>();  
		// 泛型里面定义的都是基本数据类型的引用数据类型，所以应该找到基本数据类型的包装类
		int count = 0;
		for(int x = 0; x<chs.length; x++ )
		{
			// 在这里做一个改进，只统计字母
			Integer values = t1.get(chs[x]);  // 得到对应的值
			if(values!=null)
				count = values;
			count++;
			t1.put(chs[x],count);
			count = 0;
			// 因为有两个put比较重复，所以想一下是否可以改善一下
			/*
			if(values==null)
			{
				t1.put(chs[x],1);
			}
			else
			{
				values++;
				t1.put(chs[x],values);
			}
			*/
		}
//		System.out.println(t1);
//		return null;

		StringBuilder sb = new StringBuilder();

		Set<Map.Entry<Character, Integer>> entryset = t1.entrySet(); 

		Iterator<Map.Entry<Character, Integer>> m1 = entryset.iterator();
		while(m1.hasNext())
		{
			Map.Entry<Character, Integer> it = m1.next();
			Character key = it.getKey();
			Integer values = it.getValue();
			sb.append(key+"("+values+")");
		}
		// 用一个容器来存储形式多样的格式
		return sb.toString();
 	}
}